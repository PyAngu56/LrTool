// Generated by CoffeeScript 1.6.3
var app;

app = angular.module('myApp', ['ngResource', 'googlechart', 'ui.router']);

app.config(function($stateProvider, $urlRouterProvider) {
  $stateProvider.state("home", {
    url: "/Intro",
    templateUrl: "/demo/intro.html"
  });
  $stateProvider.state("list", {
    url: "/Focales",
    templateUrl: "/demo/focals.html",
    controller: FocalCtrl
  });
  return $stateProvider.state("collection", {
    url: "/Collections",
    templateUrl: "/demo/collections.html",
    controller: CollectionCtrl
  });
});

app.directive('progressIndicator', function() {
  return {
    restrict: 'E',
    scope: {
      progress: '='
    },
    link: function(scope, element, attrs) {
      return scope.$watch('progress', function(v) {
        return scope.curPrg = v;
      });
    },
    templateUrl: '/demo/progress.html'
  };
});

app.factory('ProgressService', function($resource) {
  var Progress, r, working;
  Progress = $resource('/collections/getProgress');
  r = {
    'lastStatus': {
      'text': 'Choose collection',
      'index': 0,
      'maxi': 0,
      'end': true
    }
  };
  working = false;
  r.GetState = function() {
    return working;
  };
  r.setCallback = function(cb) {
    return r.cb = cb;
  };
  r.getLastStatus = function() {
    return r.lastStatus;
  };
  r.getProgress = function() {
    var prg;
    working = true;
    return prg = Progress.get({}, function() {
      r.lastStatus = prg;
      r.cb(prg);
      if (prg.end !== true) {
        r.getProgress();
      }
      if (prg.end === true) {
        return working = false;
      }
    });
  };
  return r;
});

this.FocalCtrl = function($scope, $http, $q, $resource) {
  var Cameras, Graph;
  Graph = $resource('/graphs/:type/:camid/:minFoc/:maxFoc/:pas');
  Cameras = $resource('/cameras/models');
  $scope.lastentries = [];
  Cameras.get({}, function(cams) {
    $scope.cameras = cams.cams;
    return $scope.mycam = cams.cams[0];
  });
  $scope.get_pub = function() {
    var e, mongraph, v;
    e = {
      'min': $scope.minFoc,
      'max': $scope.maxFoc,
      'pas': $scope.pas
    };
    v = $scope.lastentries.filter(function(x) {
      return x.min === e.min && x.max === e.max && x.pas === e.pas;
    });
    if (v.length === 0) {
      $scope.lastentries.push(e);
    }
    if ($scope.lastentries.length > 4) {
      $scope.lastentries = $scope.lastentries.slice(1);
    }
    return mongraph = Graph.get({
      type: $scope.graphStyle,
      camid: $scope.mycam.id,
      minFoc: $scope.minFoc,
      maxFoc: $scope.maxFoc,
      pas: $scope.pas
    }, function() {
      return $scope.chart = mongraph;
    });
  };
  $scope.zoom = function(row) {
    var key;
    key = $scope.chart.data.rows[row]['c'][0];
    $scope.minFoc = key.low;
    $scope.maxFoc = key.high;
    $scope.pas = Math.floor(((key.high - key.low) / 10) + 1);
    return $scope.get_pub();
  };
  $scope.back = function(e) {
    $scope.minFoc = e.min;
    $scope.maxFoc = e.max;
    $scope.pas = e.pas;
    return $scope.get_pub();
  };
  $scope.minFoc = 0;
  $scope.maxFoc = 800;
  $scope.pas = 30;
  return $scope.graphStyle = "PieChart";
};

this.CollectionCtrl = function($scope, $http, $q, $resource, ProgressService) {
  var Collections, Images, Process, errors, index, total;
  Collections = $resource('/collections/getlist');
  Images = $resource('/collections/getImages/:colId');
  Process = $resource('/collections/processImage', {}, {
    "do": {
      method: 'POST'
    }
  });
  total = 0;
  index = 0;
  errors = [];
  ProgressService.setCallback(function(res) {
    return $scope.currentProgress = res;
  });
  $scope.currentProgress = ProgressService.getLastStatus();
  Collections.get({}, function(colls) {
    return $scope.collections = colls.colls;
  });
  $scope.isWorking = function() {
    return ProgressService.GetState();
  };
  $scope.Process = function(id) {
    var images;
    return images = Images.get({
      colId: id
    }, function() {
      $scope.imgList = images.imgs;
      index = 0;
      total = $scope.imgList.length;
      errors = [];
      return $scope.CropAgain();
    });
  };
  return $scope.CropAgain = function() {
    var res, vpict;
    vpict = $scope.imgList.shift();
    index += 1;
    $scope.currentProgress = {
      'text': vpict.fullName,
      'index': index,
      'maxi': total,
      'end': false,
      'errors': errors
    };
    return res = Process["do"]({
      'img': vpict
    }, function() {
      if (res.result === false) {
        errors.push(vpict.fullName);
      }
      if ($scope.imgList.length > 0) {
        $scope.CropAgain();
      }
      if ($scope.imgList.length === 0) {
        return $scope.currentProgress = {
          'text': 'Done',
          'end': true,
          'errors': errors
        };
      }
    });
  };
};
