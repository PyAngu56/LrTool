// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  app = angular.module('myApp', ['ngResource', 'googlechart', 'ui.router']);

  app.config(function($stateProvider) {
    var col, home, list;
    home = {
      name: "home",
      url: "/Intro",
      templateUrl: "/demo/intro.html"
    };
    list = {
      name: "list",
      url: "/Focales",
      templateUrl: "/demo/focals.html",
      controller: FocalCtrl
    };
    col = {
      name: "collection",
      url: "/Collections",
      templateUrl: "/demo/collections.html",
      controller: CollectionCtrl
    };
    $stateProvider.state(home);
    $stateProvider.state(list);
    return $stateProvider.state(col);
  });

  app.directive('progressIndicator', function() {
    return {
      restrict: 'E',
      scope: {
        progress: '='
      },
      link: function(scope) {
        return scope.$watch('progress', function(v) {
          return scope.curPrg = v;
        });
      },
      templateUrl: '/demo/progress.html'
    };
  });

  app.factory('AskInfo', function($rootScope) {
    var r;
    r = {};
    r.SendPicture = function(pict) {
      return $rootScope.$broadcast('askInfo', pict);
    };
    return r;
  });

  this.FocalCtrl = function($scope, $http, $q, $resource) {
    var Cameras, Graph;
    Graph = $resource('/graphs/:type/:camid/:minFoc/:maxFoc/:pas');
    Cameras = $resource('/cameras/models');
    $scope.lastentries = [];
    Cameras.get({}, function(cameras) {
      $scope.cameras = cameras.cams;
      return $scope.mycam = cameras.cams[0];
    });
    $scope.get_pub = function() {
      var e, mongraph, v;
      e = {
        'min': $scope.minFoc,
        'max': $scope.maxFoc,
        'pas': $scope.pas
      };
      v = $scope.lastentries.filter(function(x) {
        return x.min === e.min && x.max === e.max && x.pas === e.pas;
      });
      if (v.length === 0) {
        $scope.lastentries.push(e);
      }
      if ($scope.lastentries.length > 4) {
        $scope.lastentries = $scope.lastentries.slice(1);
      }
      return mongraph = Graph.get({
        type: $scope.graphStyle,
        camid: $scope.mycam.id,
        minFoc: $scope.minFoc,
        maxFoc: $scope.maxFoc,
        pas: $scope.pas
      }, function() {
        return $scope.chart = mongraph;
      });
    };
    $scope.zoom = function(row) {
      var key;
      key = $scope.chart.data.rows[row]['c'][0];
      $scope.minFoc = key.low;
      $scope.maxFoc = key.high;
      $scope.pas = Math.floor(((key.high - key.low) / 10) + 1);
      return $scope.get_pub();
    };
    $scope.back = function(e) {
      $scope.minFoc = e.min;
      $scope.maxFoc = e.max;
      $scope.pas = e.pas;
      return $scope.get_pub();
    };
    $scope.minFoc = 0;
    $scope.maxFoc = 800;
    $scope.pas = 30;
    return $scope.graphStyle = "PieChart";
  };

  this.CollectionCtrl = function($scope, $http, $q, $resource, AskInfo) {
    var Collections, Images, Process, errors, index, total;
    Collections = $resource('/collections/getlist');
    Images = $resource('/collections/getImages/:colId');
    Process = $resource('/collections/processImage', {}, {
      "do": {
        method: 'POST'
      }
    });
    total = 0;
    index = 0;
    errors = [];
    Collections.get({}, function(colls) {
      return $scope.collections = colls.colls;
    });
    $scope.Process = function(id) {
      var images;
      return images = Images.get({
        colId: id
      }, function() {
        $scope.imgList = images.imgs;
        index = 0;
        total = $scope.imgList.length;
        errors = [];
        return $scope.ProcessAgain();
      });
    };
    $scope.ProcessAgain = function() {
      var res, vpict;
      vpict = $scope.imgList.shift();
      index += 1;
      $scope.currentProgress = {
        'text': vpict.fullName,
        'index': index,
        'maxi': total,
        'end': false,
        'errors': errors
      };
      return res = Process["do"]({
        'img': vpict
      }, function() {
        if (res.result === false) {
          errors.push(vpict.fullName);
          $scope.ProcessAgain();
        }
        if (res.result === true) {
          AskInfo.SendPicture(res);
        }
        if ($scope.imgList.length === 0) {
          return $scope.currentProgress = {
            'text': 'Done',
            'end': true,
            'errors': errors
          };
        }
      });
    };
    return $scope.$on('Resume', function() {
      if ($scope.imgList.length > 0) {
        return $scope.ProcessAgain();
      }
    });
  };

  this.NameCtrl = function($scope, $http, $q, $resource) {
    var Train;
    Train = $resource('/collections/train/:IdLocal/:name');
    return $scope.AddTrain = function() {
      return Train.get({
        IdLocal: $scope.image.id_local,
        name: $scope.name
      }, function() {
        $scope.name = "";
        return $scope.$emit('Resume');
      });
    };
  };

  $scope.Skip = function() {
    $scope.$emit('Resume');
    $scope.Label = function() {
      return alert('beauty');
    };
    return $scope.$on('askInfo', function(sender, image) {
      $scope.image = image;
      $scope.imgSrc = image.imgSrc;
      return $scope.name = image.recog;
    });
  };

}).call(this);
